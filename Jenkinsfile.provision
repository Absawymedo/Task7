pipeline {
    agent any

    environment {
        AWS_CREDS = credentials('aws-creds')
        SSH_KEY   = credentials('ec2-ssh-key')
    }

    triggers {
        githubPush()   // webhook push to main branch
    }

    stages {
        stage('Terraform Init') {
            steps {
                sh '''
                  export AWS_ACCESS_KEY_ID=$AWS_CREDS_USR
                  export AWS_SECRET_ACCESS_KEY=$AWS_CREDS_PSW
                  cd terraform
                  terraform init -backend-config="bucket=my-tf-state-bucket" -backend-config="key=ci/terraform.tfstate" -backend-config="region=eu-west-1"
                '''
            }
        }

        stage('Terraform Apply') {
            steps {
                sh '''
                  export AWS_ACCESS_KEY_ID=$AWS_CREDS_USR
                  export AWS_SECRET_ACCESS_KEY=$AWS_CREDS_PSW
                  cd terraform
                  terraform apply -auto-approve
                '''
            }
        }

        stage('Get EC2 Public IP') {
            steps {
                script {
                    env.EC2_IP = sh(
                        script: "cd terraform && terraform output -raw public_ip",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('Configure with Ansible') {
            steps {
                sh '''
                  cd ansible
                  echo "[ec2]" > inventory
                  echo "$EC2_IP ansible_user=ubuntu ansible_ssh_private_key_file=$SSH_KEY" >> inventory
                  ansible-playbook -i inventory playbook.yml
                '''
            }
        }
    }

    post {
        success {
            build job: 'DeployPipeline', parameters: [string(name: 'EC2_IP', value: env.EC2_IP)]
        }
    }
}


